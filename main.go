package main

import (
	// "fmt"
	"os"
)

func main() {
	// folderPath := "/home/tudi/ram/TestMock/"

	// filter.ByFolder(folderPath).ByExtension("go").ByContent("package").Rename("bak")
	// filter.ByFolder(folderPath).PrintFileNames(os.Stdout)
	// filter.ByFolder(folderPath).ByExtension("go").ByContent("package").Copy("bak").ByFolder(folderPath).PrintFiles(os.Stdout).ByFileName("main.go.bak").ByExtension("bak").PrintFiles(os.Stdout)
	// filter.ByFolder(folderPath).ByFileName("main.go").Rename("bak").PrintFilePath(os.Stdout)
	// filter.SearchByFolder(folderPath).FilterByExtension("bak").PrintFilePath(os.Stdout).FilesRevert("bak")

	// makefile := []string{folderPath + makefileName}

	// fmt.Println("mk:", makefile)

	// filter.SearchWalkFolder(folderPath).
	// 	FilterByContent("// Code generated by MockGen. DO NOT EDIT.").
	// 	ContentExtractByPattern("// Source:").
	// 	PrintContent(os.Stdout).
	// 	SearchByFolder(folderPath).
	// 	FilterByFileName(makefile...).
	// 	PrintFileNames(os.Stdout).
	// 	ContentAppend("xxx").
	// 	PrintContent(os.Stdout).
	// 	PrintFilesContent(os.Stdout)

	// filter.SearchWalkFolder(folderPath).
	// 	ContentAppendMockTargetsMakefile(folderPath).
	// 	FilterByFileName(makefile...).
	// 	PrintFilesContent(os.Stdout)

	o := FilesOps{}
	// o.FilesCreate("/home/tudi/ram/created_file1.txt", "/home/tudi/ram/created_file2.txt")
	o.SearchByFolder("/home/tudi/ram").
		PrintFileNames(os.Stdout).
		FilterByExtension("bak").
		FilesDelete().
		PrintFileNames(os.Stdout)
}
